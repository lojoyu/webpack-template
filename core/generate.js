//Module Dependencies
import path from 'path';
import fs from "fs";
import chalk from 'chalk';
import ncp from 'ncp';
import { promisify } from 'util';
import execa from 'execa';
import Listr from 'listr';
import { projectInstall } from 'pkg-install';

const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
    return copy(options.templateDirectory, options.targetDirectory, {
        clobber: false,
    });
}

async function initGit(options) {
    const result = await execa('git', ['init'], {
        cwd: options.targetDirectory,
    });
    if (result.failed) {
        return Promise.reject(new Error('Failed to initialize git'));
    }
    return;
}

export async function createProject(options) {
    
    let dirname = __dirname;
    let dirstr = dirname.substr(dirname.lastIndexOf('/') + 1) + '$',
        fixedurl = dirname.replace(new RegExp(dirstr), '');
    options.templateDirectory = `${fixedurl}templates/${options.type}`;
    options.targetDirectory = `./${options.projectName}`;
    
    try {
        await access(options.templateDirectory, fs.constants.R_OK);
    } catch (err) {
        console.error('%s Invalid template name', chalk.red.bold('ERROR'));
        process.exit(1);
    }

    const tasks = new Listr([
    {
        title: 'Copy project files',
        task: () => copyTemplateFiles(options),
    },
    {
        title: 'Initialize git',
        task: () => initGit(options),
        enabled: () => options.git,
    },
    {
        title: 'Install dependencies',
        task: () =>
        projectInstall({
            cwd: options.targetDirectory,
        }),
        skip: () =>
        !options.runInstall
            ? 'Pass --install to automatically install dependencies'
            : undefined,
    }]);

    await tasks.run();
    console.log('%s Project ready', chalk.green.bold('DONE'));
    return true;
}




// export function generate(options) {

//     async function copyFile() {
//         // if (err) {
//         //     console.error(err);
//         // } else {
//         console.log(__dirname);
//         let dirname = __dirname;

//         let dirstr = dirname.substr(dirname.lastIndexOf('/') + 1) + '$',
//             fixedurl = dirname.replace(new RegExp(dirstr), '');

//         try {
//             await fs.copy(`${fixedurl}/templates/`, `./${options.projectName}`);
//         } catch(err) {
//             console.error('%s Failed to copy files', chalk.red.bold('ERROR'));
//             process.exit(1);
//         }
//         // fs.copy(`${fixedurl}/templates/`, `./${projectname}`, function(err) {
//         //     if (err) {
//         //         console.error(err)
//         //     } else {
//         //         checkInstall();
//         //         console.log('%s Project ready', chalk.green.bold('DONE'));
//         //     }
//         // });
    
//         //}
//     }

//     //make dir
//     try {
//         await fs.mkdirs(`./${options.projectName}`);
//     } catch {
//         console.error('%s Failed to create project folder', chalk.red.bold('ERROR'));
//         process.exit(1);
//     }
    

//     // const templateDir = path.resolve(
//     //     new URL(import.meta.url).pathname,
//     //     '../../templates',
//     //     options.template
//     //   );
//     //   options.templateDirectory = templateDir;
     
//     //   try {
//     //     await access(templateDir, fs.constants.R_OK);
//     //   } catch (err) {
//     //     console.error('%s Invalid template name', chalk.red.bold('ERROR'));
//     //     process.exit(1);
//     //   }
//     const tasks = new Listr([
//         {
//           title: 'Copy project files',
//           task: () => copyTemplateFiles(options),
//         },
//         // {
//         //   title: 'Initialize git',
//         //   task: () => initGit(options),
//         //   enabled: () => options.git,
//         // },
//         // {
//         //   title: 'Install dependencies',
//         //   task: () =>
//         //     projectInstall({
//         //       cwd: options.targetDirectory,
//         //     }),
//         //   skip: () =>
//         //     !options.runInstall
//         //       ? 'Pass --install to automatically install dependencies'
//         //       : undefined,
//         // },
//     ]);
     
//     await tasks.run();
//     console.log('%s Project ready', chalk.green.bold('DONE'));



    
    



//     // if (!projectname == undefined || !projectname == "") {
//     //     fs.mkdirs(`./${projectname}`, function(err) {
//     //         if (err) {
//     //             console.error(err);
//     //         } else {
//     //             console.log("writing README file...");
//     //             fs.writeFile(`./${projectname}/README.md`, "Generated By Webpack Template", copyFile);
//     //         } 
//     //     });
//     // }
// }


